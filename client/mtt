#!/usr/bin/env perl
#
# Copyright (c) 2005-2006 The Trustees of Indiana University.
#                         All rights reserved.
# $COPYRIGHT$
# 
# Additional copyrights may follow
# 
# $HEADER$
#

use strict;

use Data::Dumper;
use Getopt::Long;
use File::Basename;
use Cwd;

# Try to find the MTT files.  Assume that mtt executable is in the
# base directory for the MTT files.  Try three methods:

# 1. With no effort; see if we can just "require" and find MTT files.
# 2. If $0 is a path, try adding that do @INC and try "require" again.
# 3. Otherwise, search $ENV[PATH] for mtt, and when you find it, add
#    that directory to @INC and try again.

use lib cwd() . "/lib";

my $ret;
eval "\$ret = require MTT::Version";
if (1 != $ret) {
    my $dir = dirname($0);
    my @INC_save = @INC;

    # Change to the dir of $0 (because it might be a relative
    # directory) and add the cwd() to @INC
    my $start_dir = cwd();
    chdir($dir);
    chdir("..");
    push(@INC, cwd() . "/lib");
    chdir($start_dir);
    eval "\$ret = require MTT::Version";

    # If it didn't work, restore @INC and try looking for mtt in the
    # path

    if (1 != $ret) {
        @INC = @INC_save;
        my @dirs = split(/:/, $ENV{PATH});
        my $mtt = basename($0);
        foreach my $dir (@dirs) {

            # If we found the mtt executable, add the dir to @INC and
            # see if we can "require".  If require fails, restore @INC
            # and keep trying.
            if (-x "$dir/$mtt") {
                chdir($dir);
                chdir("..");
                push(@INC, cwd() . "/lib");
                chdir($start_dir);
                eval "\$ret = require MTT::Version";
                if (1 == $ret) {
                    last;
                } else {
                    @INC = @INC_save;
                }
            }
        }
    }

    # If we didn't find them, die.
    die "Unable to find MTT support libraries"
        if (0 == $ret);
}

# Must use "require" (run-time) for all of these, not "use"
# (compile-time)

require Config::IniFiles;
require MTT::Version;
require MTT::MPI;
require MTT::Test;
require MTT::Files;
require MTT::Messages;
require MTT::INI;
require MTT::Reporter;
require MTT::Constants;
require MTT::FindProgram;
require MTT::Trim;

my @file_arg;
my $scratch_arg;
my $help_arg;
my $debug_arg;
my $verbose_arg;
my $force_arg;
my $get_mpi_arg;
my $install_mpi_arg;
my $build_tests_arg;
my $run_tests_arg;
my $trim_arg;
my $version_arg;

my @SAVE_ARGV = @ARGV;

&Getopt::Long::Configure("bundling", "require_order");
my $ok = Getopt::Long::GetOptions("file|f=s" => \@file_arg,
                                  "scratch|s=s" => \$scratch_arg,
				  "help|h" => \$help_arg,
				  "debug|d" => \$debug_arg,
				  "verbose|v" => \$verbose_arg,
                                  "force" => \$force_arg,
                                  "get-mpi!" => \$get_mpi_arg,
                                  "install-mpi!" => \$install_mpi_arg,
                                  "build-tests!" => \$build_tests_arg,
                                  "run-tests!" => \$run_tests_arg,
                                  "trim!" => \$trim_arg,
                                  "version" => \$version_arg,
                                  );

# Everything ok?

if ($version_arg) {
    print "MTT Version $MTT::Version::Major.$MTT::Version::Minor\n";
    exit(0);
}
if (! @file_arg) {
    print "Must specify at least one --file argument.\n";
    $ok = 0;
}
if (!$ok || $help_arg) {
    print("Command line error\n") 
        if (!$ok);
    print "Options:
--file|-f <config_file>       Specify the configuration file
--scratch|-s <dir_name>       Scratch directory (where all work is done)
--help|-h                     This message
--debug|-d                    Output lots of debug messages
--verbose|-v                  Output some status / verbose messages
                              while processing
--force                       Do steps even if they would not normally 
                              be executed
--[no-]get-mpi                Do the \"Get MPI\" phase
--[no-]install-mpi            Do the \"Install MPI\" phase
--[no-]build-tests            Do the \"Build tests\" phase
--[no-]run-tests              Do the \"Run tests\" phase
--[no-]trim                   Do the \"Trim\" phase

If no options other than --file (or -f) are specified, the MTT will
default to trying to make as much progress as possible (i.e., running
each of the phases as necessary).  

The phases can be specified in positive or negative form.  You can
only specify positive or negative phases in a run; you cannot mix both
positive and negative phases in a single MTT run.

* If any phases are specified in the positive form, then only those
  phases will be run (e.g., \"--get-mpi --install-mpi\").  
* If negative phases are specified, then thoses phases will *not* be
  run.\n";

    exit($ok);
}

# Check debug

my $debug = ($debug_arg ? 1 : 0);
my $verbose = ($verbose_arg ? 1 : $debug);
MTT::Messages::Messages($debug, $verbose);
MTT::Messages::Debug("Debug is $debug, Verbose is $verbose\n");
MTT::Messages::Verbose("*** MTT: $0 @SAVE_ARGV\n");

MTT::FindProgram::FindZeroDir();

########################################################################
# Params
########################################################################

# See if we got a scratch root
if (! $scratch_arg) {
    $scratch_arg = ".";
}
MTT::Messages::Debug("Scratch: $scratch_arg\n");
if (! -d $scratch_arg) {
    MTT::Files::mkdir($scratch_arg, 0777);
}
if (! -d $scratch_arg) {
    MTT::Messages::Abort("Could not make scratch dir: $scratch_arg\n");
}
chdir($scratch_arg);
$scratch_arg = cwd();
MTT::Messages::Debug("Scratch resolved: $scratch_arg\n");

# If any of the --get-mpi, --install-mpi, --build-tests, or
# --run-tests are specified, then their defaults all go to 0.
# Otherwise, if none are specified, they all default to 1.

my $get_mpi = 1;
my $install_mpi = 1;
my $build_tests = 1;
my $run_tests = 1;
my $trim = 1;

if (defined($get_mpi_arg) || defined($install_mpi_arg) ||
    defined($build_tests_arg) || defined($run_tests_arg) ||
    defined($trim_arg)) {

    # If anything is defined as "yes", then only do those

    if ($get_mpi_arg || $install_mpi_arg || 
        $build_tests_arg || $run_tests_arg ||
        $trim_arg) {

        $get_mpi = $install_mpi = $build_tests = $run_tests = $trim = 0;

        $get_mpi = 1 if defined($get_mpi_arg) && $get_mpi_arg;
        $install_mpi = 1 if defined($install_mpi_arg) && $install_mpi_arg;
        $build_tests = 1 if defined($build_tests_arg) && $build_tests_arg;
        $run_tests = 1 if defined($run_tests_arg) && $run_tests_arg;
        $trim = 1 if defined($trim_arg) && $trim_arg;
    } 

    # Otherwise, just negate whatever option was negated

    else {
        $get_mpi = 0 if defined($get_mpi_arg) && !$get_mpi_arg;
        $install_mpi = 0 if defined($install_mpi_arg) && !$install_mpi_arg;
        $build_tests = 0 if defined($build_tests_arg) && !$build_tests_arg;
        $run_tests = 0 if defined($run_tests_arg) && !$run_tests_arg;
        $trim = 0 if defined($trim_arg) && !$trim_arg;
    }
}

########################################################################
# Load up all old data
########################################################################

# Make directories
my $source_dir = 
    MTT::Files::mkdir("$scratch_arg/$MTT::Constants::source_subdir");
my $install_dir = 
    MTT::Files::mkdir("$scratch_arg/$MTT::Constants::install_subdir");

# Load up all the MPI sources that this system has previously obtained
MTT::MPI::LoadSources($source_dir)
    if ($get_mpi || $install_mpi || $trim);

# Load up all the installs of the MPI sources
MTT::MPI::LoadInstalls($install_dir)
    if ($install_mpi || $build_tests || $run_tests || $trim);

# Load up the built tests for each install
MTT::Test::LoadBuilds($install_dir)
    if ($build_tests || $run_tests || $trim);

# Load up the run tests for each install
MTT::Test::LoadRuns($install_dir)
    if ($run_tests || $trim);


########################################################################
# Read the ini file(s)
########################################################################

foreach my $file (@file_arg) {
    
    # Load up the ini file

    MTT::Messages::Debug("Reading ini file: $file\n");
    my $ini = new Config::IniFiles(-file => $file, 
                                   -nocase => 1,
                                   -allowcontinue => 1);
    if (! $ini) {
        MTT::Messages::Warning("Could not read INI file: $file; skipping\n");
        next;
    }

    # Run the phases

    MTT::Reporter::Init($ini);

    MTT::MPI::Get($ini, $source_dir, $force_arg)
        if ($get_mpi);
    MTT::MPI::Install($ini, $install_dir, $force_arg)
        if ($install_mpi);
    MTT::Test::Build($ini, $install_dir, $force_arg)
        if ($build_tests);
    MTT::Test::Run($ini, $install_dir, $force_arg)
        if ($run_tests);

    # Remove old sources, installs, and builds

    MTT::Trim::Trim($ini)
        if ($trim);

    # Shutdown the reporter

      MTT::Reporter::Finalize();
}

# That's it!

exit(0);
