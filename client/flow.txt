===========================================================================
= MPI Get
===========================================================================

input to modules:
-----------------
(cwd: section dir for this source)

section_name
module
module-specifc params:
  - svn: url (pre_export / post_export)
  - tarball: tarball (cache, pre_extract / post_extract)
  - copytree: directory (cache, pre_copy / post_copy)
  - OMPI_Snapshot: url

output in MTT::MPI::sources and XML:
------------------------------------
Automatically added by framework:
- section_name
- mpi_name
- module_name
- unique_id
- timestamp

Output from module:
- version
- prepare_for_install
- module_data (optional, for module-specific params)
  - svn: directory (pre_copy / post_copy)
  - tarball: tarball (pre_extract / post_extract)
  - copytree: directory (pre_copy / post_copy)
  - OMPI_Snapshot: tarball


===========================================================================
= MPI Install
===========================================================================

input to modules:
-----------------
(cwd: dir where framework wants the build to occur)

From ini file:
- section_name
- module
- configure_args
- vpath_mode
- make_all_args
- make_check
- std_combined
- compiler_name
- compiler_version
- setenv
- unsetenv
- prepend_path
- append_path

Calculated:
- section_dir
- srcdir
- abs_srcdir
- configdir
- builddir
- installdir

output in MTT::MPI::installs and XML:
-------------------------------------
Only saved in XML:
- module: stdout (only if success != 0)
- module: stderr (only if success != 0)
- moudle: configure_stdout
- module: make_all_stdout
- module: make_all_stderr
- module: make_check_stdout

Saved in both:
- framework: section_name
- framework: mpi_name
- framework: mpi_section_name
- framework: mpi_version
- framework: mpi_unique_id
- framework: tests_status
- framework: timestamp
- ini file: compiler_name
- ini file: compiler_version
- ini file: configure_args
- ini file: vpath_mode
- ini file: std_combined
- ini file: setenv
- ini file: unsetenv
- ini file: prepend_path
- ini file: append_path
- module: success
- module: result_message
- module: bindir
- module: libdir
- module: c_bindings
- module: cxx_bindings
- module: f77_bindings
- module: f90_bindings
- module: module_data

reported:
---------
Hard-coded:
- phase ("Install MPI")

From INI file:
- section_name
- compiler_name
- compiler_version
- flags
- vpath_mode
- stdout_stderr_combined
- environment (indirectly)

From framework:
- start_timestamp
- stop_timestamp
- mpi_name
- mpi_section_name
- mpi_version
- mpi_unique_id

From module:
- success
- result_message
- stdout
- stderr


===========================================================================
= Test build
===========================================================================

input to modules:
-----------------
(cwd: source dir of test suite sources)
(PATH and LD_LIBRARY_PATH set to point to relevant MPI install)

Config hash:
    From ini file:
    - section_name
    - setenv
    - unsetenv
    - prepend_path
    - append_path

    From framework:
    - srcdir

Other parameters:
- $ini: ini file handle
- $mpi_install: hash pointing to MPI install

output in MTT::Tests::tests and XML:
------------------------------------
filled in by framework:
- section_name
- setenv
- unsetenv
- prepend_path
- append_path
- srcdir
- mpi_name
- mpi_section_name
- mpi_version
- mpi_unique_id

filled in by module:
- success
- stdout (only if success != 0, never saved in XML)
- result_message

reported:
---------
phase
start_timestamp
success
compiler_name
compiler_version
result_message
environment
stdout
mpi_name
mpi_section_name
mpi_version
mpi_unique_id


===========================================================================
= Test run
===========================================================================

input to modules:
-----------------
(cwd: source dir of test suite sources)
(PATH and LD_LIBRARY_PATH set to point to relevant MPI install)

output from module:
-------------------
a reference to a list of hashes, each containing:
- exectuable: absolute or relative to srcdir
- argv: in addition to exectuable
- np_ok: logical, e.g., "&if(&le(&np(), 64), 1, 0)", default 1
- pass: logical, default "&eq(&test_exit_status(), 0)"
- save_stdout: logical
