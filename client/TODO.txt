- From code review:
  - make the version number that perfbase.php checks be the same
    version number that the client uses to send -- e.g., check it in a
    file somewhere
  - brian's point about fork/exec in php code -- perhaps we should use
    apache as a proxy to a standalone process that is not running as
    apache.  two issues:
    - helps performance, because we don't fork/exec
    - don't run as apache, so that if our php or perfbase has a bug,
      that user will have limited
  - other things can print to php/stderr:
    - getcwd()
    - fclose()
    - putenv()
    - proc_open() (?)
    --> should we turn off all error reporting (based on a config
        variable)?
  - MTT_DEBUG should be ditched -- change to $debug

- Add an option to have MTT only report results, and do nothing else.

- Finish MPI/Get/Copytree.pm

- Finish Test/Build/NPB.pm, Test/Run/NPB.pm

- Should we save the output of the test build module (i.e., the list
  of tests) and use that (by default) in the test run module?
  - Build has capability to filter (e.g., Intel filters based on what
    bindings exist), but run/simple does not.  So you can not build
    the fortran tests, but then still try to run them of "tests =
    src/&cat(file)" -- how can we get the filtering down there
    (easily)?

- Add better error checking to perfbase.php
  - can we check to ensure that we're not inputting a duplicate result
    into perfbase?  what happens if we input a duplicate result into
    perfbase? 

- add support for some performance-oriented tests

- add support for disconnected scenarios

- do perfbase http put better; can all the queued http put's be
  combined into a single put? (i.e., make server side php smarter?)

- be able to handle case where svn checkouts go badly and svn
  ends up waiting for input (E.g., username or password).  Should be
  able to detect this somehow and know to kill it.

- add pre_hook and post_hook to all sub modules that run before the
  main action and after the main action; intent is to [optionally]
  give some arguments sufficient to launch another engine.pl in the
  next phase (e.g., have a post_hook to BuildMPI that runs engline.pl
  in the BuildTests phase).

- make centralized database download set of constants for the db
  (e.g., how many lines of stderr to report, etc.)

- figure out "get" phase better to determine if we need a new MPI
    source or not
    - some can tell immediately
    - some cannot tell without remote access
    would be better to put all the nasty compare logic up in Get.pm
    directly instead of in each module

- need a lockfile to protect all the XML files in case multiple
  engines running simultaneously

- add trimming functionality: deleting old builds
    - put real timestamps in saved xml; delete trees older than a
      given date?

- test build source is not cached like MPI source
  --> have to go get it for every build (e.g., from svn), which won't
      necessarily work on compute nodes
