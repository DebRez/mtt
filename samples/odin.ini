#======================================================================
# Overall configuration
#======================================================================

[MTT]
# No overrides to defaults

#======================================================================
# MPI get phase
#======================================================================

[MPI get: ompi-nightly-trunk]
mpi_details = Open MPI

module = OMPI_Snapshot
url = http://www.open-mpi.org/nightly/trunk

#----------------------------------------------------------------------

[MPI get: ompi-nightly-v1.0]
mpi_details = Open MPI

module = OMPI_Snapshot
url = http://www.open-mpi.org/nightly/v1.0

#======================================================================
# Install MPI phase
#======================================================================

[MPI install: odin gcc warnings]
mpi_get = ompi-nightly-trunk,ompi-nightly-v1.0
save_stdout_on_success = 0
separate_stdout_stderr = 1

module = OMPI
vpath_mode = none
make_all_arguments = -j 4
make_check = 1
compiler_name = gnu
compiler_version = &shell("gcc --version | head -n 1 | awk '{ print \$3 }'")
configure_arguments = CFLAGS=-g --enable-picky --enable-debug --disable-mpi-f90
setenv = LM_LICENSE_FILE /home/licenses/absoft/license.txt
setenv = FOO /home/foo/absoft/license.txt
setenv = BAR /home/bar/absoft/license.txt

#======================================================================
# MPI run details
#======================================================================

[MPI Details: Open MPI]
exec = mpirun -np &test_np() --prefix &test_prefix() &test_executable() &test_argv()

#======================================================================
# Test get phase
#======================================================================

[Test get: trivial]
module = Trivial

#----------------------------------------------------------------------

[Test get: intel]
module = SVN
url = https://svn.open-mpi.org/svn/ompi-tests/trunk/intel_tests

#----------------------------------------------------------------------

[Test get: ibm]
module = SVN
url = https://svn.open-mpi.org/svn/ompi-tests/trunk/ibm
post_export = <<EOT
./autogen.sh
EOT

#----------------------------------------------------------------------

[Test get: imb]
module = SVN
url = https://svn.open-mpi.org/svn/ompi-tests/trunk/IMB_2.3

#======================================================================
# Test build phase
#======================================================================

[Test build: trivial]
test_get = trivial
save_stdout_on_success = 1
separate_stdout_stderr = 1
stderr_save_lines = -1

module = Trivial

#----------------------------------------------------------------------

[Test build: intel]
test_get = intel
save_stdout_on_success = 0
separate_stdout_stderr = 1
stderr_save_lines = -1

module = Shell
build_command = <<EOF
build_file=coll

# Do we have Fortran bindings?
have_f77=`ompi_info --parsable | grep bindings:f77:yes`
f=to-build.$$
rm -f $f
if test "$have_f77" != ""; then
    cp $build_file $f
else
    egrep -v "_f$" $build_file > $f
fi

echo MAKING FILES: `cat $f`

# Build the files
cd src
cat ../$f | xargs make
if test "$?" != "0"; then
    rm -f $f
    exit 1
fi
cd ..
rm -f $f

# Remove all the "failure = success" tests -- can't handle those
# nicely yet
rm -f \
    MPI_Abort_c MPI_Abort_f \
    MPI_Errhandler_fatal_c MPI_Errhandler_fatal_f \
    MPI_Finalize_c MPI_Finalize_f
EOF

#----------------------------------------------------------------------

[Test build: ibm]
test_get = ibm
save_stdout_on_success = 0
separate_stdout_stderr = 1
stderr_save_lines = -1

module = Shell
build_command = <<EOT
./configure CC=mpicc CXX=mpic++ F77=mpif77
make
EOT

#----------------------------------------------------------------------

[Test build: imb]
test_get = imb
save_stdout_on_success = 0
separate_stdout_stderr = 1
stderr_save_lines = -1

module = Shell
build_command = <<EOT
cd src
make clean IMB-MPI1
EOT

#======================================================================
# Test Run phase
#======================================================================

[Test run: trivial]
test_build = trivial
pass = &eq(&test_exit_status(), 0)
timeout = &max(30, &multiply(10, &test_np()))
save_stdout_on_pass = 0
separate_stdout_stderr = 0

module = Simple
tests = &find_executables(".")
only_if_exec_exists = 1
np = &if(&gt(&rm_max_procs(), 0), &step(2, &max(2, &rm_max_procs()), 2), 2)

#----------------------------------------------------------------------

[SKIP Test run: intel coll]
test_build = intel
pass = &eq(&test_exit_status(), 0)
timeout = &max(30, &multiply(10, &test_np()))
save_stdout_on_pass = 0
separate_stdout_stderr = 0

module = Simple
tests = &find_executables("src")
#np = &step(2, &max(2, &min(64, &rm_max_procs())), 2)
np = &rm_max_procs()
only_if_exec_exists = 1

#----------------------------------------------------------------------

[SKPI Test run: ibm]
test_build = ibm
pass = &eq(&test_exit_status(), 0)
timeout = &max(30, &multiply(10, &test_np()))
save_stdout_on_pass = 0
separate_stdout_stderr = 0

# Currently no tests -- just wanted to ensure that this compiled
module = Simple
tests = &find_executables("collective", "communicator", "datatype", \
                          "dynamic", "environment", "group", "info", \
                          "io", "onesided", "pt2pt", "topology")

#----------------------------------------------------------------------

[>>>>SKIP<<<< Test run: imb]
test_build = imb
pass = &eq(&test_exit_status(), 0)
timeout = &max(30, &multiply(10, &test_np()))
save_stdout_on_pass = 0
separate_stdout_stderr = 0

# Currently no tests -- just wanted to ensure that this compiled
module = Simple
tests = 

#======================================================================
# Reporter phase
#======================================================================

[>> SKIP << Reporter: IU database]
module = Perfbase
realm = OMPI
username = test
password = test
platform = IU Odin cluster
url = http://www.open-mpi.org/~jsquyres/perfbase/test.php

#----------------------------------------------------------------------

[Reporter: write to text file]
module = TextFile
file = odin-$phase-$section-$mpi_name-$mpi_version.txt
separator = >>>>----------------------------------------------------------<<<<

#----------------------------------------------------------------------

[Reporter: write to ini file]
module = INIFile
file = odin-$phase-$section-$mpi_name-$mpi_version.ini

#----------------------------------------------------------------------

[Reporter: send email]
module = Email
to = jsquyres@open-mpi.org
subject = MPI test results: $phase / $section
