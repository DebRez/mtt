# This is the overall configuration file for the MPI test suite.  It
# downloads an MPI implementation, potentially builds it, and installs
# it.  If the MPI is installed successfully, the framework then builds
# some tests against the installed MPI.  If they are compiled
# successfully, the tests are then run.

# Results are recorded in a variety of different ways (e.g., sent back
# to a central database, e-mailed to a specified e-mail address,
# dumped to a file, etc.). 

# The testing framework operates in phases.

#======================================================================
# Download phase
#======================================================================

# The following keys are permitted in the [Download] section:
# download: section name
# downloaded: name of a section that was already downloaded (the name
#    must be identical)

[Download]
download = ompi-nightly-trunk
#download = ompi-nightly-v1.0

# The following keys are permitted in the sub-BuildMPI sections:

# module: name of the module that will do this download (must be
#     specified)

# Other keys may be allowed, but will be specified by the module that
# is performing the download (however, most use the key "url" as an
# indicator as to where to download from).

#----------------------------------------------------------------------

[ompi-nightly-trunk]
module = OMPI_Snapshot
url = http://www.open-mpi.org/nightly/trunk

#----------------------------------------------------------------------

[ompi-nightly-v1.0]
module = OMPI_Snapshot
url = http://www.open-mpi.org/nightly/v1.0

#======================================================================
# Build MPI phase
#======================================================================

# The following keys are permitted in the [BuildMPI] section:
# build: section name
# built: name of a section that was already built (the name must be
#    identical)

[BuildMPI]
build = odin gcc default
build = odin gcc warnings

# The following keys are permitted in the sub-BuildMPI sections:

# module: module name (must be specified)
# compiler_name: one of: gnu pgi intel kai absoft pathscale (must be specified)
# compiler_version: usually a &shell() expression to get the compiler's version
# vpath: none, absolute, relative (default "none")
# make_all_args: given to "make $args all" (default "")
# configure_args: given to "configure $args" (default "")
# separate_stdout_stderr: logical, whether to separate out stderr and
#                         stdout or not (default: 0)
# make_check: logical, whether to run "make check" or not (default: 1)

# These keys are also accepted in sub-BuildMPI sections, but are
# listed separately because they are also accepted elsewhere.  They
# are called the Environment Keys.

# setenv: name value
# unsetenv: name
# prepend_path: name value
# append_path: name value

# Other keys may be allowed, but will be specified by the module that
# is performing the build.

#----------------------------------------------------------------------

[odin gcc default]
module = OMPI
setenv = BuildMPI_FOO this is a test
vpath = none
make_all_args = -j 4
make_check = 1
compiler_name = gnu
separate_stdout_stderr = 1
compiler_version = &shell("gcc --version | head -n 1 | awk '{ print \$3 }'")
configure_args = CFLAGS=-g --enable-debug --with-libnuma=/san/numa --with-mvapi=/usr/local/ib --disable-mpi-f90

#----------------------------------------------------------------------

[odin gcc warnings]
module = OMPI
vpath = none
make_all_args = -j 4
make_check = 1
compiler_name = gnu
separate_stdout_stderr = 1
compiler_version = &shell("gcc --version | head -n 1 | awk '{ print \$3 }'")
configure_args = CFLAGS=-g --enable-debug --with-libnuma=/san/numa --with-mvapi=/usr/local/ib --disable-mpi-f90

#======================================================================
# Build tests phase
#======================================================================

# The following keys are permitted in the [BuildTests] section:
# build: section name
# built: name of a section that was already built (the name must be
#    identical)

[BuildTests]
build = intel
build = ibm
build = imb

# The following keys are permitted in the sub-BuildTests sections:

# module: module name (no default; must be specified)

# Test source keys (exactly one of these must be specified).  This
# source will be used for *each* set of tests that are compiled (e.g.,
# if the MPI was built several different ways and "tarball" was
# specified, the tarball will be extracted once for each MPI
# installation):

# copydir: copy the entire tree to a new location for testing
# tarball: expand the tarball for testing
# svn: specify a URL for SVN checkout for testing

# The Environment Keys are also accepted here.  Note that PATH and
# LD_LIBRARY_PATH are automatically prepended with the relevant
# directories for each MPI installation each time a test section is
# built.  Hence, it is not necessary to manually prepend_path for PATH
# or LD_LIBRARY_PATH; it is automatically done for you.

# Also note that all the Environment keys from the relevant [BuildMPI]
# section will be automatically processed before the sub-module is
# invoked to build the tests.  Hence, if an MPI was built with "setenv
# = foo bar", then the environment variable "foo" will be set to the
# value "bar" before the BuildTests section is invoked to build tests
# with that MPI installation.

# Other keys may be allowed, but will be specified by the module that
# is performing the build.

#----------------------------------------------------------------------

[intel]
module = Intel_ompi_tests
#copydir = /u/jsquyres/svn/ompi-tests/intel_tests
tarball = /u/jsquyres/svn/ompi-tests/intel_tests.tar.gz
buildfile = topo
setenv = bogus &shell(" &shell("echo echo") &shell("echo hello") ")
setenv = gcc_version &shell("gcc --version | head -n 1 | awk '{ print \$3 }'")
setenv = TestMPI_BAR2 this is a test

#----------------------------------------------------------------------

[ibm]
module = IBM_ompi_tests
svn = https://svn.open-mpi.org/svn/ompi-tests/trunk/ibm

#----------------------------------------------------------------------

[imb]
module = IMB_ompi_tests
tarball = /u/jsquyres/svn/ompi-tests/imb.tar.gz

#======================================================================
# Reporter phase
#======================================================================

# The following keys are permitted in the [BuildTests] section:
# report: section name

[Reporter]
#report = IU database
report = write to text file
report = write to ini file
report = send email

# The following keys are permitted in the sub-Reporter sections:

# module: module name (no default; must be specified)

# Other keys are allowed, but will be specified by the reporter module

#----------------------------------------------------------------------

[IU database]
module = Perfbase

# The following keys are permitted by the Perfbase module:

# realm: http realm for the response
# username: username
# password: password
# platform: string name identifying this resource
# url: url to post the results to

realm = OMPI
username = test
password = test
platform = IU odin cluster
url = http://www.osl.iu.edu/~jsquyres/perfbase/test.php

#----------------------------------------------------------------------

[write to text file]
module = TextFile

# The following keys are permitted by the TextFile module:

# file: filename to write to (absolute is better), a single dash ("-")
#     means standard output.  Values that can be in the filename that will
#     be substituted:
#     - $date: mmddyyyy
#     - $time: hhmmss
#     - $mpi_name: name of the MPI
#     - $mpi_version: version of the MPI
#     - $phase: the phase being reported on
#     - $section: the section of this INI file being reported on
#     The final filename is evaluated as a perl expression, so perl
#     escaping is allowed.
# separator: string, will be placed between subsequent entries in the file

file = test-$phase-$section-$mpi_name-$mpi_version.out
separator = >>>>----------------------------------------------------------<<<<

#----------------------------------------------------------------------

[write to ini file]
module = INIFile

# The following keys are permitted by the INIFile module:

# file: filename to write to (absolute is better). Values that can be
#     in the filename that will be substituted:
#     - $date: mmddyyyy
#     - $time: hhmmss
#     - $mpi_name: name of the MPI
#     - $mpi_version: version of the MPI
#     - $phase: the phase being reported on
#     - $section: the section of this INI file being reported on
#     The final filename is evaluated as a perl expression, so perl
#     escaping is allowed.

file = test-$phase-$section-$mpi_name-$mpi_version.ini

#----------------------------------------------------------------------

[send email]
module = Email

# The following keys are permitted by the File module:

# to: address to send to
# subject: subject line.  Values that can be in the subject that will
#     be substituted:
#     - $date: mmddyyyy
#     - $time: hhmmss
#     - $mpi_name: name of the MPI
#     - $mpi_version: version of the MPI
#     - $phase: the phase being reported on
#     - $section: the section of this INI file being reported on
#     The final filename is evaluated as a perl expression, so perl
#     escaping is allowed.

to = jsquyres@osl.iu.edu
subject = MPI test results: $phase / $section
